[webdriver]
; Path to a webdriver on your local machine.
; Download chromedriver at http://chromedriver.chromium.org/downloads or set auto_update to true.
path =
; Automatically update the webdriver (Chrome only).
auto_update = true
; Where to store downloaded files.
download_path =
; Optional. Path to the browser binary you wish to use. Make sure it is compatible with your webdriver supplied above.
; For example, you can use this setting to use a different Chromium browser like Brave.
web_browser_path =
; Optional. You may set your user data directory.
; The location for Chromeâ€™s default user data directory differs depending on your platform. The locations are:
;   - Windows: C:\Users\<username>\AppData\Local\Google\Chrome\User Data
;   - Mac OS: Users/<username>/Library/Application Support/Google/Chrome
;   - Linux: /home/<username>/.config/google-chrome
;
; NOTE: if you are using a different browser than Chrome, then make sure that you point to the user data directory of
; the browser you are using.
user_data_directory =
; Optional. Share user data between multiple instances. Only Chromium browsers (Chrome, Brave, etc) are supported.
; You can run Kairos multiple times at the same time. Setting this to true will ensure that multiple instances of Kairos
; will only count as one device by TradingView. You'll need to provide your user data directory at the setting
; user_data_directory above.
; NOTE: if necessary, Kairos will create copies of your user data directory. If you have issues running Kairos in this
; way, try running it with the flag -cls.
share_user_data = false
; Resolution to run the browser in (usually this is equal to the resolution of your device)
resolution = 1920,1080
; Run Kairos in the background
run_in_background = false
; Using the clipboard will improve the performance significantly but does make use of your clipboard.
clipboard = true
; Defines how long chromedriver should wait for a page to load (seconds).
page_load_timeout = 60
; Defines how long chromedriver should wait for finding elements (seconds). This should be zero or a single digit.
; Kairos uses this as a fallback option and unless you have serious issues running the script - you should not change
; this.
wait_time_implicit = 0
; Defines how long the script should wait finding elements (seconds).
; 10 seconds should be enough. If you get a lot of retries, try to up this number.
check_if_exists_timeout = 10
; Override webdriver options. Used for debugging purposes. Use with care.
;options = --disable-extensions, --disable-notifications, etc
; Linux only! Use a proxy display. Useful if you run Kairos on system without a display (like VPS).
; Requires xvfb. To install xvfb on Ubuntu run the following command: sudo apt install -y xvfb
use_proxy_display = false
; Define whether or not you are using a captcha extension.
; When set, Kairos will run first time setup with all extensions that are enabled. Regardless of this setting and on
; subsequent runs, extensions will be disabled. It is recommended to use any of the following extensions that have been
; known to work from the list below:
; * NopeCHA -> https://chrome.google.com/webstore/detail/nopecha-captcha-solver/dknlfmjaanfblgfdfebhijalfmhmjjjo
captcha_extension = false

[tradingview]
username =
password =
; Accept Performance & Analytics cookies
accept_performance_analytics_cookies = false
; Accept Advertising cookies
accept_advertising_cookies = false
; YAML files define your alerts in TradingView
; This is a fallback option when you don't provide a yaml file as an argument to the script, i.e. you run
; 'python main.py' instead of 'python main.py <my_alerts>.yaml'
settings = refresh.yaml
; Directory where your yaml files reside. Can be either a relative path to Kairos, or an absolute path.
settings_dir = yaml
; Set this to the maximum number of server side alerts per your TradingView subscription, see
; https://www.tradingview.com/gopro/
max_alerts = 30
; If you want to test this script, set it to a low number (like 5 or so). If you want to run all of your symbols choose
; a ridiculous high number such as 10000 or so.
max_symbols_per_watchlist = 10000
; restart_inactive_alerts will make your existing alerts active again at start up. Use this together with
; clear_inactive_alerts to safe your existing alerts. NOTE: this does not safe existing alerts it they fire whilst
; Kairos is running. If you need to ensure that your existing alerts remain in place than you'll have to set
; clear_alerts and clear_inactive_alerts to false. In which case you will be limited to the max server side alerts
; per your TradingView subscription plan.
restart_inactive_alerts = false
; clear_inactive_alerts will remove inactive alerts once at start up and during the run of the program itself. What you
; can do here is setting a low expiration on alerts and then clean them up while still running this script. For example,
; if you have a script that triggers alerts on the close of the previous bar then those alerts should fire within
; one minute, if not then they can be thrown away - saving you precious server side alerts.
clear_inactive_alerts = true
; clear_alerts will remove ALL alerts (including any manually placed ones) once at start up.
clear_alerts = false
; Set this to true if values in your YAML file for your conditions are exact.
; If set to false, then conditions in TradingView will match if they start with the values you set in your YAML file.
; However, you still need to provide exact values for text fields and number fields (obviously).
exact_conditions = false
; Setting the actual alert on TradingVIew can go wrong in more ways than can be thought of. Although, the plethora of
; options to set delays (see section delays) will alleviate most timing problems, it still will generate an exception
; now and then. A retry usually means that Kairos refreshes the page and tries to do whatever it was doing again.
create_alert_max_retries = 2
; Use TV's screenshot feature instead of making a screenshot from Kairos itself.
; This will slow down the script considerably (see screenshot_dialog option under delays).
; Use this if you want to adhere to the TV's Terms & Conditions, i.e. when (automatically) publishing ideas.
tradingview_screenshot = true
; Define how often Kairos should try to retrieve indicator values. On each retry, the script will pause equal to
; 'change_symbol'
indicator_values_max_retries = 5
; Checks whether a market is still listed. If you are sure that your watchlists are without delisted tickers you can set
; this to false and enjoy a small performance gain. It is recommended to leave this to true, and to override the option
; in your YAML files instead. See /yaml/_signal.yaml for an example.
verify_market_listing = true

; If you have problems completing the running of the script, set the delays below to a higher number.
[delays]
; Delay after symbol gets changed, or the chart gets loaded (seconds).
; Charts with a lot of data plotted are slower to change from symbol.
change_symbol = 1
; Allow the page to handle submitting the alert form and to allow the page to catch up (seconds).
; If you have problems completing the running of the script, set this to a higher number.
submit_alert = 0
; At various places brakes are added to allow the page to catch up after an interaction before moving on to the next
; interacting (seconds). Used multiple times per alert.
break = 0.25
break_mini = 0.1
; if you have a very limited amount of alerts you can set, such as on a free plan or having a lot of existing alerts
; you'll need to keep, you can introduce a delay here to let the alerts expire. For example, say you have only one alert
; available, you can set the delay to 60 seconds and set the expiration date in the YAML file to 1 minute as well.
; Obviously, this trick will only work if you have set clear_inactive_alerts (above) to true. Note, that with the
; aforementioned example you essentially limit yourself to one alert per minute instead of the 5 (on average) normally.
; Used only when you run out of alerts.
clear_inactive_alerts = 2
; Allow the screenshot dialog to load.
; Only relevant when [tradingview] option tradingview_screenshot is set to true.
screenshot_dialog = 2.5
; Give the page some extra time load prior to making the screenshot.
; Only relevant when [tradingview] option tradingview_screenshot is set to false and [logging] option screenshot_path is
; set.
screenshot = 0.5
; Pause between keystrokes
keystroke = 0.01
; Delay to make sure that indicator values are refreshed.
; This delay will be skipped if you provide the 'is_loaded' option in your YAML. The 'is_loaded' is an option that
; points to the index of a value in your indicator that always has a value other than 'n/a'. Kairos checks if the value
; at index <<is_loaded>> is anything but 'n/a' to determine if the indicator values are loaded.
; This delay is one of the most impactful on the Kairos' performance. For optimal results modify this number and run
; Kairos a few times with a watchlist of a 100 or so, until the number of signals are consistently the same. You may set
; this delay in your YAML files as well with the value defined in the YAML file taking priority. Be aware that TV can be
; slower during times of high traffic.
read_indicator_value = 0.2
; Give downloads more time to complete
download_file = 0.5

[performance]
; By default, this block of settings is configured for optimal reliability. You can play with other configurations to improve
; performance.
; Optimal reliability:
;   read_from_data_window (true)
;   wait_until_chart_is_loaded (true)
;   read_all_values_at_once (true)
;   change_symbol_with_space (false)
; Optimal performance:
;   read_from_data_window (true)
;   wait_until_chart_is_loaded (false)
;   read_all_values_at_once (false)
;   change_symbol_with_space (true)
;
; Go with optimal performance only when it takes Kairos too long to run your watchlist(s) within the timeframe(s) as specified
; in your YAML. That is, either when run Kairos on low timeframes (1h or less) and/or on (multiple) large watchlists.
; Instead, I suggest to go with either the configuration for optimal reliability, or to go with:
;   read_from_data_window (true)
;   wait_until_chart_is_loaded (true)
;   read_all_values_at_once (false)
;   change_symbol_with_space (false)
;
; Recommended value: true. When set to false, data will be read from the chart instead of the data window tab. This setting
; is here to have an alternative method available if the data window method fails due to TV changing the webpage
read_from_data_window = true
; Recommended value: true. If set to false, Kairos will wait [delays] -> change_symbol amount of time instead. Setting this
; option to false while read_from_data_window (above) also set to false may make Kairos unreliable with respect to the amount
; of signals it generates and depending on how high you have set [delays] -> change_symbol.
wait_until_chart_is_loaded = true
; Recommended value: true. Read all the values at once instead of just the necessary value when needed.
; NOTE: if read_from_data_window is set to false, Kairos will always read all the values at once
read_all_values_at_once = true
; Use the space bar to move through your watchlist. This will be significantly faster at the cost of precision.
change_symbol_with_space = false

[logging]
; CRITICAL = 50
; ERROR = 40
; WARNING = 30
; INFO = 20
; DEBUG = 10
; NOTSET = 0
; If you encounter problems running the script it will likely be one of the following:
; - an unexpected popup (inc. tooltips) got fired which made the to be interacted with element hidden
; - it took to long for an element interaction to finish before the next one started
; - you opened tradingview separately which put you over the max devices making all elements on the page uninteractable
; Set this to 10 to get more debugging information. The information of the current / last run is saved to debug.log.
level = 20
; clear the log file at start up
clear_on_start_up = true
; Path to store screenshots are stored, .e.g. screenshots (don't use quotation marks). This option acts as a fallback
; for the [tradingview] option tradingview_screenshot. If that option is set to 'false' then Kairos will try to make a
; screenshot and save it to the directory set below.
; Note, although quicker than using TV's screenshot feature, making screenshots in this way may be in violation of
; TradingView's term of use (see https://www.tradingview.com/policies/).
screenshot_path = screenshots
; Options are:
; - alert: create a screenshot when the alert is set
; - summary: create a screenshot when the summary is made (faster)
screenshot_timing = summary
; Path were watchlists are stored, e.g. watchlists (don't use quotation marks).
watchlist_path = watchlists
; Create a screenshot on some errors (some errors are unsupported for now)
screenshot_on_error = true
; Set a maximum of screenshots for each session to save disk space and disk I/O
max_screenshots_on_error = 3

[mail]
; All values must be without quotation marks
uid =
; If you have 2fa enabled you'll need to Sign in using App Passwords. More info about App Passwords can be found below.
; Google Documentation:    https://support.google.com/accounts/answer/185833?hl=en
; Tutorial:                 https://www.lifewire.com/get-a-password-to-access-gmail-by-pop-imap-2-1171882
pwd =
; Your mail provider's imap, e.g. imap.gmail.com
imap_server = imap.gmail.com
; Your mail provider's smtp, e.g. smtp.gmail.com
smtp_server = smtp.gmail.com
; Specify the mailbox to search for, e.g. inbox.
; Labels act as a mailbox as well.
; NOTE: whitespace is unsupported.
mailbox = inbox
; Search a mail for a term. If the term isn't found then it will not get processed,
; If you use Gmail, you can use Gmail Search Filters and do fancy stuff like
; in:inbox is:unread TradingView Alert:
; Note: if you are using Gmail Search Filters you'll need to set search_area below to X-GM-RAW
search_term =
; Possible values ALL, UNSEEN, SUBJECT, BODY, FROM amongst others. For a more in depth look visit
; https://www.example-code.com/python/imap_search.asp
; If you use Gmail you can set this to X-GM-RAW and use Gmail Search Filters to do fancy stuff like:
; is:unread label:tradingview_alerts subject:("TradingView Alert") alert triggered.
; If left blank it will default to UNSEEN.
search_area = UNSEEN
; By default the summary will be send as a list.
; You can set this to 'table' in which case it will be send in a table format instead. Note that doing so you won't have
; pretty, pretty, pretty screenshots.
format = list
; Optional. Set a separate email address to receive administrator messages such as when to update your webdriver.
; If left blank, administrator messages will be send to the email address listed under [mail]->uid.
admin_email_address =

[api]
; Path to the JSON file that holds the API credentials
; This is used for exporting signals to a Google Spreadsheet
google = google-api.json

[backtesting]
; Define a threshold for the number of trades that has to be closed for the data to be included
; For example, a threshold of 10 will ensure that only data is included of assets that have 10 or more closed trades on
; a per time frame basis. For example, 10+ closed trades on the hourly will be included while for the same asset only 7
; trades were found for the daily. The daily data wouldn't be included whilst the hourly would. This will change
; averages accordingly.
threshold = 1